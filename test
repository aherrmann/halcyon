#!/usr/bin/env bash

set -eu

export HALCYON_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd -P )

source "${HALCYON_DIR}/src.sh"


test_ghc () {
	local -a versions_a
	versions_a=()
	versions_a+=( '7.8.4' )
	versions_a+=( '7.8.3' )
	versions_a+=( '7.8.2' )
	versions_a+=( '7.6.3' )
	versions_a+=( '7.6.1' )
	versions_a+=( '7.4.2' )
	versions_a+=( '7.2.2' )
	versions_a+=( '7.0.4' )

	for version in "${versions_a[@]}"; do
		log
		log
		halcyon install --ghc-version="${version}" "$@" || return 1
	done
}


test_sandbox_apps () {
	local -a names_a
	names_a=()
	names_a+=( 'alex' )
	names_a+=( 'happy' )
	names_a+=( 'c2hs' )
	names_a+=( 'cpphs' )
	names_a+=( 'hscolour' )
	names_a+=( 'haddock' )
	names_a+=( 'greencard' )

	local constraints_dir
	constraints_dir=$( get_tmp_dir 'halcyon-constraints' ) || return 1

	mkdir -p "${constraints_dir}" || return 1

	local -A labels_A
	labels_A=()
	for name in "${names_a[@]}"; do
		local label
		label=$( halcyon label "${name}" 2>'/dev/null' ) || return 1
		labels_A[${name}]="${label}"
		halcyon constraints "${label}" >"${constraints_dir}/${label}.constraints" 2>'/dev/null' || return 1

		local -a opts_a
		opts_a=()
		opts_a+=( --constraints="${constraints_dir}" )
		opts_a+=( --prefix="${HALCYON_BASE}/sandbox" )
		if [[ "${name}" == 'c2hs' ]]; then
			opts_a+=( --sandbox-extra-apps="${labels_A[alex]} ${labels_A[happy]}" )
			opts_a+=( --sandbox-extra-apps-constraints="${constraints_dir}" )
		fi

		log
		log
		halcyon install "${opts_a[@]}" "${label}" "$@" || return 1
	done
}


test_apps () {
	local -a names_a
	names_a=()
	names_a+=( 'keter' )
	names_a+=( 'pandoc' )

	local constraints_dir
	constraints_dir=$( get_tmp_dir 'halcyon-constraints' ) || return 1

	mkdir -p "${constraints_dir}" || return 1

	local -A labels_A
	labels_A=()
	for name in "${names_a[@]}"; do
		local label
		label=$( halcyon label "${name}" 2>'/dev/null' ) || return 1
		labels_A[${name}]="${label}"
		halcyon constraints "${label}" >"${constraints_dir}/${label}.constraints" 2>'/dev/null' || return 1

		local -a opts_a
		opts_a=()
		opts_a+=( --constraints="${constraints_dir}" )

		log
		log
		halcyon install "${opts_a[@]}" "${label}" "$@" || return 1
	done
}


bench_first_build () {
	local url csv_file
	expect_args url csv_file -- "$@"
	shift 2

	local name log_file
	name=$( basename "${url}" ) || return 1
	log_file=$( get_tmp_file 'halcyon-shootout' )'.log' || return 1

	rm -rf "${HALCYON_BASE}"

	HALCYON_SANDBOX_REBUILD=1 \
	HALCYON_NO_UPLOAD=1 \
		halcyon install "${url}" "$@" 2>&1 | tee "${log_file}" || return 1

	local restore_time sandbox_time build_time install_time
	restore_time=$( filter_matching 'Building sandbox directory' <"${log_file}" | awk '{ print $2 }' )
	sandbox_time=$( filter_matching 'Configuring app' <"${log_file}" | awk '{ print $2 }' )
	build_time=$( filter_matching 'Preparing install' <"${log_file}" | awk '{ print $2 }' )
	install_time=$( filter_matching 'App installed' <"${log_file}" | awk '{ print $2 }' )

	local sandbox_size app_size
	sandbox_size=$( filter_matching 'Sandbox built' <"${log_file}" | awk '{ print $6 }' )
	app_size=$( filter_matching 'App built' <"${log_file}" | awk '{ print $6 }' )

	echo "${name},${restore_time},${sandbox_time},${build_time},${install_time},${sandbox_size},${app_size}" >>"${csv_file}"
}


test_shootout () {
	# NOTE: When not benchmarking, hello-wai goes first, so that the
	# sandbox can be reused to speed up the other builds.

	local -a urls_a
	urls_a=()
	if ! (( ${HALCYON_INTERNAL_BENCH:-0} )); then
		urls_a+=( 'https://github.com/mietek/hello-wai' )
	fi
	urls_a+=( 'https://github.com/mietek/hello-apiary' )
	urls_a+=( 'https://github.com/mietek/hello-happstack' )
	urls_a+=( 'https://github.com/mietek/hello-mflow' )
	urls_a+=( 'https://github.com/mietek/hello-miku' )
	urls_a+=( 'https://github.com/mietek/hello-scotty' )
	urls_a+=( 'https://github.com/mietek/hello-simple' )
	urls_a+=( 'https://github.com/mietek/hello-snap' )
	urls_a+=( 'https://github.com/mietek/hello-spock' )
	if (( ${HALCYON_INTERNAL_BENCH:-0} )); then
		urls_a+=( 'https://github.com/mietek/hello-wai' )
	fi
	urls_a+=( 'https://github.com/mietek/hello-wheb' )
	urls_a+=( 'https://github.com/mietek/hello-yesod' )

	local csv_file
	csv_file=''
	if (( ${HALCYON_INTERNAL_BENCH:-0} )); then
		csv_file=$( get_tmp_file 'halcyon-shootout' )'.csv' || return 1
	fi

	for url in "${urls_a[@]}"; do
		log
		log
		if (( ${HALCYON_INTERNAL_BENCH:-0} )); then
			bench_first_build "${url}" "${csv_file}" "$@" || return 1
		else
			halcyon install "${url}" "$@" || return 1
		fi
	done

	if (( ${HALCYON_INTERNAL_BENCH:-0} )); then
		cat "${csv_file}"
	fi
}


test_examples () {
	local -a urls_a
	urls_a=()
	urls_a+=( 'https://github.com/mietek/howistart' )
	urls_a+=( 'https://github.com/mietek/hl' )
	urls_a+=( 'https://github.com/mietek/tryhaskell' )
	urls_a+=( 'https://github.com/mietek/tryidris' )
	urls_a+=( 'https://github.com/mietek/trypurescript' )
	urls_a+=( 'https://github.com/mietek/tryhaste' )
	urls_a+=( 'https://github.com/mietek/gitit' )

	for url in "${urls_a[@]}"; do
		log
		log
		halcyon install "${url}" "$@" || return 1
	done
}


test_main () {
	local cmd
	expect_args cmd -- "$@"
	shift

	case "${cmd}" in
	'ghc'|'sandbox-apps'|'apps'|'shootout'|'bench-shootout'|'examples'|'all')
		true
		;;
	*)
		log_error "Unexpected command: ${cmd}"
		quote <<-EOF
			Usage
			  test COMMAND

			Commands
			  ghc
			  sandbox-apps
			  apps
			  shootout
			  bench-shootout
			  examples
			  all
EOF
		return 1
	esac

	local cache_dir
	cache_dir=$( get_tmp_dir 'halcyon-cache' ) || return 1

	export HALCYON_CACHE="${cache_dir}"

	rm -rf "${HALCYON_BASE}" '/tmp/halcyon-'* || return 1

	halcyon install "$@" || return 1

	case "${cmd}" in
	'ghc')
		test_ghc "$@" || return 1
		;;
	'sandbox-apps')
		test_sandbox_apps "$@" || return 1
		;;
	'apps')
		test_apps "$@" || return 1
		;;
	'shootout')
		test_shootout "$@" || return 1
		;;
	'bench-shootout')
		HALCYON_INTERNAL_BENCH=1 \
			test_shootout "$@" || return 1
		;;
	'examples')
		test_examples "$@" || return 1
		;;
	'all')
		test_ghc "$@" || return 1
		test_sandbox_apps "$@" || return 1
		test_apps "$@" || return 1
		test_shootout "$@" || return 1
		test_examples "$@" || return 1
	esac

	rm -rf "${HALCYON_BASE}" '/tmp/halcyon-'* || return 1
}


HALCYON_LOG_TIMESTAMP=1 \
HALCYON_NO_SELF_UPDATE=1 \
HALCYON_NO_CLEAN_CACHE=1 \
	test_main "$@"
